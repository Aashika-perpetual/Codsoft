import java.util.Scanner;
interface Transaction {
    void execute();
}
class Withdrawal implements Transaction {
    private BankAccount account;
    private double amount;
    public Withdrawal(BankAccount account, double amount) {
        this.account = account;
        this.amount = amount;
    }
    public void execute() {
        synchronized (account) {
            if (account.withdraw(amount)) {
                System.out.println("Withdrawal successful.");
            }
        }
    }
}
class Deposit implements Transaction {
    private BankAccount account;
    private double amount;
    public Deposit(BankAccount account, double amount) {
        this.account = account;
        this.amount = amount;
    }
    public void execute() {
        synchronized (account) {
            if (account.deposit(amount)) {
                System.out.println("Deposit successful.");
            }
        }
    }
}
class BankAccount {
    private double balance;
    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }
    public double getBalance() {
        return balance;
    }
    public synchronized boolean deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            return true;
        } else {
            System.out.println("Invalid deposit amount.");
            return false;
        }
    }
    public synchronized boolean withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            return true;
        } else {
            System.out.println("Invalid withdrawal amount or insufficient funds.");
            return false;
        }
    }
}
class ATM {
    private BankAccount account;
    public ATM(BankAccount account) {
        this.account = account;
    }
    public void displayMenu() {
        System.out.println("1. Withdraw");
        System.out.println("2. Deposit");
        System.out.println("3. Check Balance");
        System.out.println("4. Exit");
    }
    public void start() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            displayMenu();
            System.out.print("Select an option (1-4): ");
            String choice = scanner.nextLine();
            switch (choice) {
                case "1":
                    performTransaction(new Withdrawal(account, getAmount("withdraw")));
                    break;
                case "2":
                    performTransaction(new Deposit(account, getAmount("deposit")));
                    break;
                case "3":
                    checkBalance();
                    break;
                case "4":
                    System.out.println("Thank you for using the ATM. Goodbye!");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please select a valid option.");
            }
        }
    }
    private double getAmount(String transactionType) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the amount to " + transactionType + ": ");
        return scanner.nextDouble();
    }
    private void performTransaction(Transaction transaction) {
        Thread thread = new Thread(transaction::execute);
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    private void checkBalance() {
        double balance = account.getBalance();
        System.out.println("Your account balance is: $" + balance);
    }
}
class ATMApplication {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the initial balance for your bank account: ");
        double initialBalance = scanner.nextDouble();
        BankAccount userAccount = new BankAccount(initialBalance);
        ATM atmMachine = new ATM(userAccount);
        atmMachine.start();
    }
}
